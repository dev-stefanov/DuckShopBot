from telebot import TeleBot, types as tt

import lib.kb as kb
from lib.db import DataBase
import lib.text as text
from threading import Event
from lib.env import cfg
import lib.payment as payment

def create_handlers(bot: TeleBot, db: DataBase):

    ## WAIT FOR MESSAGE
    def wait_for_message(msg: tt.Message):
        e = Event()
        d = {}
        def on_answer(msg: tt.Message):
            d['answer'] = msg.text
            e.set()
        bot.register_next_step_handler(msg, on_answer)
        e.wait()
        return d.get('answer', None)

    ## START
    @bot.message_handler(commands=['start'])
    def start(msg: tt.Message):
        user_id = msg.from_user.id
        balance = 0
        count_buy = 0
        if 'r_' in msg.text:
            if user_id != msg.text.split('r_')[-1]:
                referal_id = int(msg.text.split('r_')[-1])
        else:
            referal_id = 0
        if user_id == int(cfg['admin_id']):
            is_admin = True
        else:
            is_admin = False
        db.create_user(user_id, balance, count_buy, referal_id, is_admin)
        bot.send_message(user_id, f"*üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ {text.shop_name}. \nüõí –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.*", reply_markup=kb.menu, parse_mode="Markdown", protect_content=True)   
    
    ## IS ADMIN
    @bot.message_handler(commands=['admin'])
    def admin(msg: tt.Message):
        user_id = msg.chat.id
        user = db.get_user(user_id)
        if user.is_admin:
            bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
        else:
            bot.send_message(user_id, "Fuck you")


    ## TEXT
    @bot.message_handler(content_types=['text'])
    def get_answer(msg: tt.Message):
        user_id = msg.from_user.id
        message = msg.text
        if message == "üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõí":
            res = db.get_categories()
            bot.send_message(user_id, "*üìï –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: *", reply_markup=kb.categories(res), parse_mode="Markdown")
        elif message == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            balance = db.get_user(user_id).balance
            count_buy = db.get_user(user_id).count_buy
            bot.send_message(user_id, f"üè¶ *–í–∞—à –±–∞–ª–∞–Ω—Å*: {balance} \nüôãüèª‚Äç‚ôÇÔ∏è *ID*: `{user_id}` \nüõç *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫*: {count_buy}", reply_markup=kb.profile_kb, parse_mode='Markdown')
        elif message == '‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            bot.send_message(user_id, '‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.info_kb)
        else:
            bot.send_message(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start')
            
    ## CALLBACK
    @bot.callback_query_handler(lambda x: True)
    def query_handler(q: tt.CallbackQuery):
        data = q.data
        user_id = q.from_user.id
        bot.delete_message(user_id, q.message.id)

        cmd, *data = data.split(";")

        ## PROFILE
        if cmd == 'deposite':
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
            sum = wait_for_message(msg)
            url = payment.deposite_url(user_id, sum)
            bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Yoomoney", reply_markup=kb.url(url))
            

        ## ADMIN
        elif cmd == 'add_category':
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
            name = wait_for_message(msg)
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
            description = wait_for_message(msg)
            if description == 'None':
                description = ''
            bot.send_message(user_id, db.add_category(name, description))

        elif cmd == 'add_good':
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:')
            category = wait_for_message(msg)
            if category == 'exit':
                bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
            else:
                msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
            name = wait_for_message(msg)
            if name == 'exit':
                bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
            else:
                msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:')
            cost = wait_for_message(msg)
            if cost == 'exit':
                bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
            else:
                msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
            count = wait_for_message(msg)
            if count == 'exit':
                bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
            else:
                msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
            description = wait_for_message(msg)
            if description == 'exit':
                bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
            else:
                bot.send_message(user_id, db.add_good(category, name, cost, count, description))

        elif cmd == 'del_category':
            res = db.get_categories()
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb.del_category(res))

        elif cmd == 'delete_category':
            name = db.get_category(*data).name
            bot.send_message(user_id, db.del_category(*data, name))

        elif cmd == 'del_good':
            res = db.get_all_goods()
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', reply_markup=kb.del_good(res))

        elif cmd == 'delete_good':
            name = db.get_good(*data).name
            bot.send_message(user_id, db.del_good(*data, name))

        elif cmd == 'back_to_admin':
            bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)

        elif cmd == 'edit_category':
            res = db.get_categories()
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb.edit_categories(res))

        elif cmd == 'edit_good':
            res = db.get_all_goods()
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb.edit_goods(res))

        elif cmd == 'ed_categories':
            res = db.get_category(int(*data))
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.edit_category(res))

        elif cmd == 'ed_goods':
            res = db.get_good(int(*data))
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.edit_good(res))

        elif cmd == 'ed_category':
            category_id = data[0]
            name_param = data[1]
            msg = bot.send_message(user_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
            new_param = wait_for_message(msg)
            db.edit_category(category_id, name_param, new_param)
            bot.send_message(user_id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', reply_markup=kb.admin_kb)

        elif cmd == 'ed_good':
            good_id = data[0]
            name_param = data[1]
            msg = bot.send_message(user_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
            new_param = wait_for_message(msg)
            db.edit_good(good_id, name_param, new_param)
            bot.send_message(user_id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', reply_markup=kb.admin_kb)


        ## GOODS
        elif cmd == 'back_to_category':
            res = db.get_categories()
            bot.send_message(user_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ", reply_markup=kb.categories(res))

        elif cmd == 'back_to_goods':
            res = db.get_goods(*data)
            bot.send_message(user_id, *data, reply_markup=kb.goods(res))

        elif cmd == 'category':
            name = db.get_category(*data).name
            res = db.get_goods(name)
            description = db.get_category(*data).description
            bot.send_message(user_id, f'*üìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {name} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ: \n*{description}**', reply_markup=kb.goods(res), parse_mode='Markdown')

        elif cmd == 'good':
            res = db.get_good(*data)
            category = res.category
            if category == '‚úâÔ∏è –ü–æ—á—Ç—ã ‚úâÔ∏è':
                bot.send_message(user_id, f'üìÉ *–¢–æ–≤–∞—Ä*: {res.name} \nüí∞*–¶–µ–Ω–∞*: {res.cost} ‚ÇΩ \nüìÉ *–û–ø–∏—Å–∞–Ω–∏–µ*: {res.description} \n\n–ó–∞—Ö–æ–¥–∏—Ç—å —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø—Ä–æ–∫—Å–∏ –ì–µ—Ä–º–∞–Ω–∏–∏ \n\n‚ùó*–¢–æ–≤–∞—Ä –≤—ã–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* \n–ü–æ—á—Ç–∞:–ü–∞—Ä–æ–ª—å:–†–µ–∑–µ—Ä–≤–Ω–∞—è–ü–æ—á—Ç–∞:–ü–∞—Ä–æ–ª—å', reply_markup=kb.good(res.name, category, res.count), parse_mode='Markdown')
            elif category == 'üëõ –ö–æ—à–µ–ª—å–∫–∏ üëõ':
                bot.send_message(user_id, f'üìÉ *–¢–æ–≤–∞—Ä*: {res.name} \nüí∞*–¶–µ–Ω–∞*: {res.cost} ‚ÇΩ \nüìÉ *–û–ø–∏—Å–∞–Ω–∏–µ*: {res.description}', reply_markup=kb.good(res.name, category, res.count), parse_mode='Markdown')
            elif category == 'üõ° VPN üõ°':
                bot.send_message(user_id, f'üìÉ *–¢–æ–≤–∞—Ä*: {res.name} \nüí∞*–¶–µ–Ω–∞*: {res.cost} ‚ÇΩ \nüìÉ *–û–ø–∏—Å–∞–Ω–∏–µ*: {res.description}', reply_markup=kb.good(res.name, category, res.count), parse_mode='Markdown')
            elif category == 'üåê –ü—Ä–æ–∫—Å–∏ üåê':
                bot.send_message(user_id, f'üìÉ *–¢–æ–≤–∞—Ä*: {res.name} \nüí∞*–¶–µ–Ω–∞*: {res.cost} ‚ÇΩ \nüìÉ *–û–ø–∏—Å–∞–Ω–∏–µ*: {res.description}', reply_markup=kb.good(res.name, category, res.count), parse_mode='Markdown')
            elif category == 'üë• –°–æ—Ü –°–µ—Ç–∏ üë•':
                bot.send_message(user_id, f'üìÉ *–¢–æ–≤–∞—Ä*: {res.name} \nüí∞*–¶–µ–Ω–∞*: {res.cost} ‚ÇΩ \nüìÉ *–û–ø–∏—Å–∞–Ω–∏–µ*: *{res.description}*', reply_markup=kb.good(res.name, category, res.count), parse_mode='Markdown')
            

        elif cmd == 'choose_count':
            res = db.get_good(*data)
            msg = bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {res.count}')
            count = wait_for_message(msg)
            balance = db.get_user(user_id).balance
            if count.isdigit():
                final_cost = int(count) * db.get_good(*data).cost
                if final_cost <= balance:
                    bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!')
                else:
                    bot.send_message(user_id, f'–≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {final_cost} ‚ÇΩ. \n–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–π –±–∞–ª–∞–Ω—Å: {final_cost - balance} ‚ÇΩ \n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å', reply_markup=kb.deposite_kb)
            else:
                bot.send_message(user_id, '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º')

        elif cmd == 'count':
            res = db.get_good(data[0])
            count = int(data[1])
            final_cost = res.cost * count
            balance = db.get_user(user_id).balance
            if balance < final_cost:
                bot.send_message(user_id, f'–≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {final_cost} ‚ÇΩ. \n–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–π –±–∞–ª–∞–Ω—Å: {final_cost - balance} ‚ÇΩ \n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å', reply_markup=kb.deposite_kb)
            else:
                bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!')
                



