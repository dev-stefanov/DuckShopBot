from telebot import TeleBot, types as tt

import lib.kb as kb
from lib.db import DataBase
import lib.text as text
from threading import Event
from lib.env import cfg

def create_handlers(bot: TeleBot, db: DataBase):

    ## WAIT FOR MESSAGE
    def wait_for_message(msg: tt.Message):
        e = Event()
        d = {}
        def on_answer(msg: tt.Message):
            d['answer'] = msg.text
            e.set()
        bot.register_next_step_handler(msg, on_answer)
        e.wait()
        return d.get('answer', None)
    def auto_add_goods():
        for i in range(5):
            db.add_good('–ü–æ—á—Ç—ã', 'Mail' + str(i), i * 10, i * 2)
        for i in range(5):
            db.add_good('–ü—Ä–æ–∫—Å–∏', 'Proxy' + str(i), i * 10, i * 2)
    def auto_add_category():
        db.add_category('–ü–æ—á—Ç—ã')
        db.add_category('–ü—Ä–æ–∫—Å–∏')
    auto_add_category()
    auto_add_goods()

    ## START
    @bot.message_handler(commands=['start'])
    def start(msg: tt.Message):
        user_id = msg.from_user.id
        balance = 0
        count_buy = 0
        if 'r_' in msg.text:
            if user_id != msg.text.split('r_')[-1]:
                referal_id = int(msg.text.split('r_')[-1])
        else:
            referal_id = 0
        if user_id == int(cfg['admin_id']):
            is_admin = True
        else:
            is_admin = False
        db.create_user(user_id, balance, count_buy, referal_id, is_admin)
        bot.send_message(user_id, f"üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ {text.shop_name}. \nüíó–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã - {text.shop_projects} \nüõí–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.", reply_markup=kb.menu)   
    
    ## IS ADMIN
    @bot.message_handler(commands=['admin'])
    def admin(msg: tt.Message):
        user_id = msg.chat.id
        user = db.get_user(user_id)
        if user.is_admin:
            bot.send_message(user_id, "Admin Panel", reply_markup=kb.admin_kb)
        else:
            bot.send_message(user_id, "Fuck you")

    ## TEXT
    @bot.message_handler(content_types=['text'])
    def get_answer(msg: tt.Message):
        user_id = msg.from_user.id
        message = msg.text
        if message == "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤":
            res = db.get_categories()
            bot.send_message(user_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ", reply_markup=kb.categories(res))
        elif message == '–ü—Ä–æ—Ñ–∏–ª—å':
            bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å")
            
    ## CALLBACK
    @bot.callback_query_handler(lambda x: True)
    def query_handler(q: tt.CallbackQuery):
        data = q.data
        user_id = q.from_user.id
        bot.delete_message(user_id, q.message.id)

        cmd, *data = data.split(";")

        ## ADD CATEGORY
        if cmd == 'add_category':
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            name = wait_for_message(msg)
            db.add_category(name)

        elif cmd == 'add_good':
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:')
            category = wait_for_message(msg)
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
            name = wait_for_message(msg)
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:')
            cost = wait_for_message(msg)
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
            count = wait_for_message(msg)
            db.add_good(category, name, cost, count)


